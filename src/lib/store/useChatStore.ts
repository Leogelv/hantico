import { create } from 'zustand';

export interface Message {
  id: string;
  type: 'user' | 'ai';
  content: string;
  timestamp: Date;
  isTyping?: boolean;
}

export interface QuickReply {
  id: string;
  text: string;
  value: string;
}

interface ChatStore {
  messages: Message[];
  isTyping: boolean;
  currentQuickReplies: QuickReply[];
  chatContext: string;
  
  // Actions
  addMessage: (content: string, type: 'user' | 'ai') => void;
  setTyping: (typing: boolean) => void;
  setQuickReplies: (replies: QuickReply[]) => void;
  clearChat: () => void;
  sendMessage: (content: string) => Promise<void>;
}

const aiResponses = {
  greeting: {
    text: "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—å—è. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç? –ú–æ–∂–µ—Ç –±—ã—Ç—å, –µ—Å—Ç—å —Å–∏–º–ø—Ç–æ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ –≤–∞—à–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ?",
    quickReplies: [
      { id: '1', text: '–•—Ä–æ–Ω–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å', value: 'fatigue' },
      { id: '2', text: '–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º', value: 'sleep' },
      { id: '3', text: '–ß–∞—Å—Ç—ã–µ –≥–æ–ª–æ–≤–Ω—ã–µ –±–æ–ª–∏', value: 'headache' },
      { id: '4', text: '–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ–º', value: 'digestion' }
    ]
  },
  fatigue: {
    text: "–ü–æ–Ω–∏–º–∞—é, —É—Å—Ç–∞–ª–æ—Å—Ç—å –º–æ–∂–µ—Ç —Å–∏–ª—å–Ω–æ –≤–ª–∏—è—Ç—å –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏. –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è –≤ –ø—Ä–∏—á–∏–Ω–∞—Ö. –ö–∞–∫ –¥–∞–≤–Ω–æ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —É–ø–∞–¥–æ–∫ —Å–∏–ª?",
    quickReplies: [
      { id: '1', text: '–ù–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å', value: 'weeks' },
      { id: '2', text: '–ë–æ–ª—å—à–µ –º–µ—Å—è—Ü–∞', value: 'month' },
      { id: '3', text: '–ü–æ–ª–≥–æ–¥–∞ –∏ –±–æ–ª–µ–µ', value: 'months' }
    ]
  },
  sleep: {
    text: "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–æ–Ω - –æ—Å–Ω–æ–≤–∞ –∑–¥–æ—Ä–æ–≤—å—è. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?",
    quickReplies: [
      { id: '1', text: '–î–æ–ª–≥–æ –∑–∞—Å—ã–ø–∞—é', value: 'fall_asleep' },
      { id: '2', text: '–ß–∞—Å—Ç–æ –ø—Ä–æ—Å—ã–ø–∞—é—Å—å', value: 'wake_up' },
      { id: '3', text: '–†–∞–Ω–æ –ø—Ä–æ—Å—ã–ø–∞—é—Å—å', value: 'early_wake' }
    ]
  },
  weeks: {
    text: "–ù–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å —É—Å—Ç–∞–ª–æ—Å—Ç–∏ - —ç—Ç–æ –ø–æ–≤–æ–¥ –¥–ª—è –≤–Ω–∏–º–∞–Ω–∏—è. –°–≤—è–∑—ã–≤–∞–µ—Ç–µ –ª–∏ –≤—ã —ç—Ç–æ —Å –∫–∞–∫–∏–º–∏-—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ –∂–∏–∑–Ω–∏? –ú–æ–∂–µ—Ç –±—ã—Ç—å, —Å—Ç—Ä–µ—Å—Å, –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ –ø–∏—Ç–∞–Ω–∏—è –∏–ª–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?",
    quickReplies: [
      { id: '1', text: '–î–∞, –±—ã–ª —Å–∏–ª—å–Ω—ã–π —Å—Ç—Ä–µ—Å—Å', value: 'stress' },
      { id: '2', text: '–ò–∑–º–µ–Ω–∏–ª—Å—è —Ä–µ–∂–∏–º –ø–∏—Ç–∞–Ω–∏—è', value: 'diet' },
      { id: '3', text: '–ù–∏—á–µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ –Ω–µ –±—ã–ª–æ', value: 'nothing' }
    ]
  }
};

export const useChatStore = create<ChatStore>((set, get) => ({
  messages: [],
  isTyping: false,
  currentQuickReplies: [],
  chatContext: '',

  addMessage: (content, type) => {
    const message: Message = {
      id: Date.now().toString(),
      type,
      content,
      timestamp: new Date()
    };
    
    set((state) => ({
      messages: [...state.messages, message]
    }));
  },

  setTyping: (typing) => {
    set({ isTyping: typing });
  },

  setQuickReplies: (replies) => {
    set({ currentQuickReplies: replies });
  },

  clearChat: () => {
    set({
      messages: [],
      currentQuickReplies: [],
      chatContext: ''
    });
  },

  sendMessage: async (content) => {
    const { addMessage, setTyping, setQuickReplies } = get();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    addMessage(content, 'user');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
    setTyping(true);
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ n8n
      const sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      const payload = {
        question: content,
        sessionId: sessionId,
        stage: 'main_chat',
        timestamp: new Date().toISOString()
      };
      
      console.log('üöÄ [GlobalChat] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ n8n:', payload);
      
      const response = await fetch('https://n8n.nooweb.online/webhook/selfagent', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload)
      });

      console.log('üì• [GlobalChat] –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);

      if (response.ok) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –æ—Ç–≤–µ—Ç–µ
        const text = await response.text();
        console.log('üìÑ [GlobalChat] –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:', text);
        
        let aiResponseText = '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!';
        
        if (text) {
          try {
            const result = JSON.parse(text);
            console.log('‚úÖ [GlobalChat] –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:', result);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç n8n
            if (Array.isArray(result) && result.length > 0 && result[0].output) {
              try {
                // –ü–∞—Ä—Å–∏–º JSON –∏–∑ –ø–æ–ª—è output
                const parsedOutput = JSON.parse(result[0].output);
                console.log('üìä [GlobalChat] –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π output:', parsedOutput);
                
                if (parsedOutput.comment) {
                  aiResponseText = parsedOutput.comment;
                } else if (parsedOutput.response) {
                  aiResponseText = parsedOutput.response;
                }
              } catch (parseError) {
                console.error('‚ùå [GlobalChat] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ output:', parseError);
              }
            } else if (result.comment) {
              aiResponseText = result.comment;
            } else if (result.response) {
              aiResponseText = result.response;
            }
          } catch (jsonError) {
            console.error('‚ùå [GlobalChat] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', jsonError);
          }
        } else {
          console.warn('‚ö†Ô∏è [GlobalChat] –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        }
        
        console.log('üí¨ [GlobalChat] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç:', aiResponseText);
        
        setTyping(false);
        addMessage(aiResponseText, 'ai');
        setQuickReplies([]);
      } else {
        console.error('‚ùå [GlobalChat] –û—à–∏–±–∫–∞ HTTP:', response.status, response.statusText);
        throw new Error('Failed to get response');
      }
    } catch (error) {
      console.error('‚ùå [GlobalChat] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ n8n:', error);
      console.log('üîÑ [GlobalChat] –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç');
      
      // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
      await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 1500));
      
      let response = aiResponses.greeting;
      
      if (content.toLowerCase().includes('—É—Å—Ç–∞–ª–æ—Å—Ç—å') || content === 'fatigue') {
        response = aiResponses.fatigue;
      } else if (content.toLowerCase().includes('—Å–æ–Ω') || content === 'sleep') {
        response = aiResponses.sleep;
      } else if (content === 'weeks') {
        response = aiResponses.weeks;
      }
      
      setTyping(false);
      addMessage(response.text, 'ai');
      setQuickReplies(response.quickReplies);
    }
  }
}));