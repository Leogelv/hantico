import { motion, AnimatePresence } from 'framer-motion';
import { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { Brain, Send, ArrowLeft, Mic, MicOff } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { OnboardingProgress } from '@/components/onboarding/OnboardingProgress';
import { useChatStore } from '@/lib/store/useChatStore';
import { useUserStore } from '@/lib/store/useUserStore';

export function AIChatScreen() {
  const navigate = useNavigate();
  const [inputValue, setInputValue] = useState('');
  const [isInputFocused, setIsInputFocused] = useState(false);
  const [isRecording, setIsRecording] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const mediaRecorder = useRef<MediaRecorder | null>(null);
  const audioChunks = useRef<Blob[]>([]);
  const { nextStep } = useUserStore();
  
  const {
    messages,
    isTyping,
    currentQuickReplies,
    addMessage,
    sendMessage,
    setQuickReplies
  } = useChatStore();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
  useEffect(() => {
    if (messages.length === 0) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
      const { setTyping } = useChatStore.getState();
      setTyping(true);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–µ—á–∞—Ç–∞–Ω–∏—è
      setTimeout(() => {
        setTyping(false);
        addMessage(
          '–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—å—è ü§ñ\n\n' +
          '–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ:\n' +
          '‚Ä¢ –ß—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è?\n' +
          '‚Ä¢ –ï—Å—Ç—å –ª–∏ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è?\n' +
          '‚Ä¢ –ö–∞–∫–∏–µ —Ü–µ–ª–∏ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å?\n\n' +
          '–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å, –∫–∞–∫ —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–≥–æ–¥–Ω—è üíö',
          'ai'
        );
        
        // –î–æ–±–∞–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã —Å —ç–º–æ–¥–∑–∏
        setQuickReplies([
          { id: '1', text: 'üò¥ –ß–∞—Å—Ç–æ —É—Å—Ç–∞—é', value: '–ú–µ–Ω—è –±–µ—Å–ø–æ–∫–æ–∏—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å –∏ —É–ø–∞–¥–æ–∫ —Å–∏–ª' },
          { id: '2', text: 'üåô –ü–ª–æ—Ö–æ —Å–ø–ª—é', value: '–£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º' },
          { id: '3', text: 'üò∞ –°—Ç—Ä–µ—Å—Å –Ω–∞ —Ä–∞–±–æ—Ç–µ', value: '–ò—Å–ø—ã—Ç—ã–≤–∞—é —Å–∏–ª—å–Ω—ã–π —Å—Ç—Ä–µ—Å—Å –∏–∑-–∑–∞ —Ä–∞–±–æ—Ç—ã' },
          { id: '4', text: '‚öñÔ∏è –•–æ—á—É –ø–æ—Ö—É–¥–µ—Ç—å', value: '–•–æ—á—É —Å–Ω–∏–∑–∏—Ç—å –≤–µ—Å –∏ —É–ª—É—á—à–∏—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫—É—é —Ñ–æ—Ä–º—É' },
          { id: '5', text: 'ü§ï –ì–æ–ª–æ–≤–Ω—ã–µ –±–æ–ª–∏', value: '–ú–µ–Ω—è –±–µ—Å–ø–æ–∫–æ—è—Ç —á–∞—Å—Ç—ã–µ –≥–æ–ª–æ–≤–Ω—ã–µ –±–æ–ª–∏' },
          { id: '6', text: 'üíä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–Ω–∞–ª–∏–∑—ã', value: '–•–æ—á—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∞–Ω–∞–ª–∏–∑—ã –∏ –ø–æ–Ω—è—Ç—å, –≤—Å—ë –ª–∏ –≤ –ø–æ—Ä—è–¥–∫–µ' },
          { id: '7', text: 'üèÉ –ë–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', value: '–•–æ—á—É —Å—Ç–∞—Ç—å –±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω—ã–º –∏ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º' },
          { id: '8', text: 'ü•ó –ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ', value: '–•–æ—á—É –Ω–∞–ª–∞–¥–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ' }
        ]);
      }, 800); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–µ—á–∞—Ç–∞–Ω–∏—è
    }
  }, []);

  // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages, isTyping]);

  const sendOnboardingMessage = async (message: string) => {
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    addMessage(message, 'user');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
    const { setTyping, setQuickReplies } = useChatStore.getState();
    setTyping(true);
    
    try {
      const sessionId = `onboarding_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      const payload = {
        question: message,
        sessionId: sessionId,
        stage: 'onboarding',
        timestamp: new Date().toISOString()
      };
      
      console.log('üöÄ [Onboarding] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ n8n:', payload);
      
      const response = await fetch('https://n8n.nooweb.online/webhook/selfagent', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload)
      });
      
      if (response.ok) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –æ—Ç–≤–µ—Ç–µ
        const text = await response.text();
        console.log('üìÑ [Onboarding] –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:', text);
        
        let aiResponseText = '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å!';
        
        if (text) {
          try {
            const result = JSON.parse(text);
            console.log('‚úÖ [Onboarding] –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:', result);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç n8n
            if (Array.isArray(result) && result.length > 0 && result[0].output) {
              try {
                const parsedOutput = JSON.parse(result[0].output);
                if (parsedOutput.comment) {
                  aiResponseText = parsedOutput.comment;
                }
              } catch (parseError) {
                console.error('‚ùå [Onboarding] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ output:', parseError);
              }
            } else if (result.comment) {
              aiResponseText = result.comment;
            }
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã
            if (result.quickReplies) {
              setQuickReplies(result.quickReplies);
            }
          } catch (jsonError) {
            console.error('‚ùå [Onboarding] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', jsonError);
          }
        } else {
          console.warn('‚ö†Ô∏è [Onboarding] –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        }
        
        setTyping(false);
        addMessage(aiResponseText, 'ai');
      } else {
        console.error('‚ùå [Onboarding] HTTP –æ—à–∏–±–∫–∞:', response.status);
        throw new Error(`HTTP error: ${response.status}`);
      }
    } catch (error) {
      console.error('‚ùå [Onboarding] –û—à–∏–±–∫–∞:', error);
      setTyping(false);
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —ç–º–æ–¥–∑–∏
      const fallbackResponses = [
        '–ü–æ–Ω–∏–º–∞—é –≤–∞—Å! ü§ó –î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è, –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å –≤–∞—à–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ. –ß—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?',
        '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å! üíö –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–≤–æ–∏—Ö —Å–∏–º–ø—Ç–æ–º–∞—Ö, —á—Ç–æ–±—ã —è –º–æ–≥ –¥–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.',
        '–û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ –≤—ã –∑–∞–±–æ—Ç–∏—Ç–µ—Å—å –æ —Å–≤–æ–µ–º –∑–¥–æ—Ä–æ–≤—å–µ! üåü –î–∞–≤–∞–π—Ç–µ —Å–æ—Å—Ç–∞–≤–∏–º –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π. –° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?',
        '–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å! ü§ù –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –±–æ–ª—å—à–µ –æ –≤–∞—à–µ–º –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏ - —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã.'
      ];
      const randomResponse = fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)];
      addMessage(randomResponse, 'ai');
    }
  };

  const handleSend = async () => {
    if (!inputValue.trim()) return;
    
    const message = inputValue.trim();
    setInputValue('');
    
    await sendOnboardingMessage(message);
  };

  const handleQuickReply = async (value: string) => {
    await sendOnboardingMessage(value);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  };

  const handleNext = () => {
    nextStep();
    navigate('/onboarding/upload');
  };

  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      mediaRecorder.current = new MediaRecorder(stream);
      audioChunks.current = [];

      mediaRecorder.current.ondataavailable = (event) => {
        audioChunks.current.push(event.data);
      };

      mediaRecorder.current.onstop = async () => {
        const audioBlob = new Blob(audioChunks.current, { type: 'audio/webm' });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await sendOnboardingMessage('üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
      };

      mediaRecorder.current.start();
      setIsRecording(true);
    } catch (error) {
      console.error('Error accessing microphone:', error);
    }
  };

  const stopRecording = () => {
    if (mediaRecorder.current && isRecording) {
      mediaRecorder.current.stop();
      mediaRecorder.current.stream.getTracks().forEach(track => track.stop());
      setIsRecording(false);
    }
  };

  return (
    <div className="min-h-screen bg-background text-foreground">
      <div className="container mx-auto px-4 py-6 max-w-4xl">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <Button
            variant="ghost"
            onClick={() => navigate('/onboarding/goals')}
            className="p-2"
          >
            <ArrowLeft className="w-5 h-5" />
          </Button>
          <OnboardingProgress currentStep={2} />
          <div className="w-9" /> {/* Spacer for balance */}
        </div>

        {/* –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π —Ö–µ–¥–µ—Ä - –∏–Ω—Ç—Ä–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å –≤ —á–∞—Ç–µ */}

        {/* Chat Messages */}
        <div className="bg-surface/50 backdrop-blur-xl border border-border/50 rounded-3xl p-6 mb-6 min-h-[400px] max-h-[500px] overflow-y-auto">
          <div className="space-y-4">
            <AnimatePresence>
              {messages.map((message) => (
                <motion.div
                  key={message.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  <div className={`max-w-[80%] ${
                    message.type === 'user' 
                      ? 'bg-primary text-primary-foreground' 
                      : 'bg-surface border border-border'
                  } rounded-2xl px-4 py-3`}>
                    {message.type === 'ai' && (
                      <div className="flex items-center gap-2 mb-2">
                        <div className="w-6 h-6 rounded-full bg-gradient-to-br from-pink-500 to-purple-600 flex items-center justify-center text-white text-xs font-bold">
                          –≠
                        </div>
                        <span className="text-xs text-muted-foreground">–ù–∞—É—á–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –≠–º–º–∞</span>
                      </div>
                    )}
                    <p className="text-sm leading-relaxed">{message.content}</p>
                    <div className="text-xs opacity-70 mt-1">
                      {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                    </div>
                  </div>
                </motion.div>
              ))}
            </AnimatePresence>

            {/* Typing Indicator */}
            <AnimatePresence>
              {isTyping && (
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  className="flex justify-start"
                >
                  <div className="bg-surface border border-border rounded-2xl px-4 py-3">
                    <div className="flex items-center gap-2 mb-2">
                      <div className="w-6 h-6 rounded-full bg-gradient-to-br from-pink-500 to-purple-600 flex items-center justify-center text-white text-xs font-bold">
                        –≠
                      </div>
                      <span className="text-xs text-muted-foreground">–≠–º–º–∞ –ø–µ—á–∞—Ç–∞–µ—Ç...</span>
                    </div>
                    <div className="flex gap-1">
                      <motion.div
                        className="w-2 h-2 bg-primary rounded-full"
                        animate={{ opacity: [0.3, 1, 0.3] }}
                        transition={{ duration: 0.6, repeat: Infinity, delay: 0 }}
                      />
                      <motion.div
                        className="w-2 h-2 bg-primary rounded-full"
                        animate={{ opacity: [0.3, 1, 0.3] }}
                        transition={{ duration: 0.6, repeat: Infinity, delay: 0.1 }}
                      />
                      <motion.div
                        className="w-2 h-2 bg-primary rounded-full"
                        animate={{ opacity: [0.3, 1, 0.3] }}
                        transition={{ duration: 0.6, repeat: Infinity, delay: 0.2 }}
                      />
                    </div>
                  </div>
                </motion.div>
              )}
            </AnimatePresence>
          </div>
          <div ref={messagesEndRef} />
        </div>

        {/* Quick Replies */}
        <AnimatePresence>
          {currentQuickReplies.length > 0 && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              className="grid grid-cols-2 gap-2 mb-4"
            >
              {currentQuickReplies.map((reply, index) => (
                <motion.button
                  key={reply.id}
                  initial={{ opacity: 0, scale: 0.9 }}
                  animate={{ opacity: 1, scale: 1 }}
                  transition={{ delay: index * 0.05 }}
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={() => handleQuickReply(reply.value)}
                  className="px-3 py-2.5 bg-surface/50 hover:bg-surface border border-border hover:border-primary/50 rounded-xl text-sm transition-all hover:shadow-sm text-left"
                >
                  {reply.text}
                </motion.button>
              ))}
            </motion.div>
          )}
        </AnimatePresence>

        {/* Chat Input */}
        <div className="relative">
          <motion.div
            animate={{
              scale: isInputFocused ? 1.02 : 1,
              boxShadow: isInputFocused 
                ? '0 0 0 1px rgba(99, 102, 241, 0.5)' 
                : '0 0 0 1px rgba(51, 51, 51, 0.5)'
            }}
            className="flex items-center gap-3 bg-surface/50 backdrop-blur-xl border border-border rounded-2xl p-3"
          >
            <Input
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              onKeyPress={handleKeyPress}
              onFocus={() => setIsInputFocused(true)}
              onBlur={() => setIsInputFocused(false)}
              placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏..."
              className="flex-1 border-0 bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0"
            />
            <Button
              onClick={isRecording ? stopRecording : startRecording}
              size="sm"
              variant={isRecording ? "destructive" : "outline"}
              className="w-11 h-11 p-0"
            >
              {isRecording ? (
                <MicOff className="w-5 h-5" />
              ) : (
                <Mic className="w-5 h-5" />
              )}
            </Button>
            <Button
              onClick={handleSend}
              disabled={!inputValue.trim() || isTyping}
              size="sm"
              className="rounded-xl"
            >
              <Send className="w-4 h-4" />
            </Button>
          </motion.div>
        </div>

        {/* Continue Button */}
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: messages.length >= 2 ? 1 : 0 }}
          className="text-center mt-8"
        >
          <Button
            onClick={handleNext}
            size="lg"
            className="px-8 bg-gradient-to-r from-health-excellent to-health-good hover:from-health-good hover:to-health-excellent"
          >
            <span className="mr-2">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</span>
            <span>‚û°Ô∏è</span>
          </Button>
          <p className="text-xs text-muted-foreground mt-2">
            –í—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥ –ø–æ–∑–∂–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —á–∞—Ç–µ
          </p>
        </motion.div>
      </div>
    </div>
  );
}