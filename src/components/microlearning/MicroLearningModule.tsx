import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Book, CheckCircle, Clock, ArrowRight, Star, Target } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';

interface MicroLesson {
  id: string;
  title: string;
  description: string;
  duration: number; // –≤ –º–∏–Ω—É—Ç–∞—Ö
  category: 'nutrition' | 'sleep' | 'exercise' | 'stress' | 'general';
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  completed: boolean;
  content: {
    text: string;
    tips: string[];
    actionItem: string;
  };
  progress: number;
}

const mockLessons: MicroLesson[] = [
  {
    id: '1',
    title: '–ì–∏–≥–∏–µ–Ω–∞ —Å–Ω–∞: –æ—Å–Ω–æ–≤—ã',
    description: '–£–∑–Ω–∞–π—Ç–µ, –∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–Ω–∞',
    duration: 3,
    category: 'sleep',
    difficulty: 'beginner',
    completed: false,
    content: {
      text: '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–æ–Ω - –æ—Å–Ω–æ–≤–∞ –∑–¥–æ—Ä–æ–≤—å—è. –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –≥–∏–≥–∏–µ–Ω–∞ —Å–Ω–∞ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π —Ä–µ–∂–∏–º, –∫–æ–º—Ñ–æ—Ä—Ç–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É (18-20¬∞C) –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —ç–∫—Ä–∞–Ω–æ–≤ –∑–∞ —á–∞—Å –¥–æ —Å–Ω–∞.',
      tips: [
        '–õ–æ–∂–∏—Ç–µ—Å—å –∏ –≤—Å—Ç–∞–≤–∞–π—Ç–µ –≤ –æ–¥–Ω–æ –≤—Ä–µ–º—è',
        '–ü—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–π—Ç–µ –∫–æ–º–Ω–∞—Ç—É –ø–µ—Ä–µ–¥ —Å–Ω–æ–º',
        '–ò–∑–±–µ–≥–∞–π—Ç–µ –∫–æ—Ñ–µ–∏–Ω–∞ –ø–æ—Å–ª–µ 16:00',
        '–°–æ–∑–¥–∞–π—Ç–µ —Ä–∏—Ç—É–∞–ª –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫–æ —Å–Ω—É'
      ],
      actionItem: '–°–µ–≥–æ–¥–Ω—è –ø—Ä–æ–≤–µ—Ç—Ä–∏—Ç–µ —Å–ø–∞–ª—å–Ω—é –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ —Å–Ω–∞'
    },
    progress: 0
  },
  {
    id: '2',
    title: '–°—Ç—Ä–µ—Å—Å –∏ –¥—ã—Ö–∞–Ω–∏–µ',
    description: '–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –¥—ã—Ö–∞–Ω–∏—è –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —Å—Ç—Ä–µ—Å—Å–∞',
    duration: 5,
    category: 'stress',
    difficulty: 'beginner',
    completed: true,
    content: {
      text: '–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ - –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–æ–º. –¢–µ—Ö–Ω–∏–∫–∞ 4-7-8 –ø–æ–º–æ–≥–∞–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞—Å–∏–º–ø–∞—Ç–∏—á–µ—Å–∫—É—é –Ω–µ—Ä–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É.',
      tips: [
        '–í–¥–æ—Ö –Ω–∞ 4 —Å—á–µ—Ç–∞ —á–µ—Ä–µ–∑ –Ω–æ—Å',
        '–ó–∞–¥–µ—Ä–∂–∫–∞ –¥—ã—Ö–∞–Ω–∏—è –Ω–∞ 7 —Å—á–µ—Ç–æ–≤',
        '–í—ã–¥–æ—Ö –Ω–∞ 8 —Å—á–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ä–æ—Ç',
        '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ 4 —Ä–∞–∑–∞'
      ],
      actionItem: '–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –¥—ã—Ö–∞–Ω–∏–µ 4-7-8 –ø–µ—Ä–µ–¥ —Å–Ω–æ–º 3 –¥–Ω—è –ø–æ–¥—Ä—è–¥'
    },
    progress: 100
  },
  {
    id: '3',
    title: '–ú–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç—ã –≤ –ø–∏—Ç–∞–Ω–∏–∏',
    description: '–í–∞–∂–Ω–æ—Å—Ç—å –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –∏ –º–∏–Ω–µ—Ä–∞–ª–æ–≤ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è',
    duration: 4,
    category: 'nutrition',
    difficulty: 'intermediate',
    completed: false,
    content: {
      text: '–ú–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç—ã –∏–≥—Ä–∞—é—Ç –∫–ª—é—á–µ–≤—É—é —Ä–æ–ª—å –≤ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–µ. –î–µ—Ñ–∏—Ü–∏—Ç –¥–∞–∂–µ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ.',
      tips: [
        '–í–∫–ª—é—á–∞–π—Ç–µ —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã–µ –æ–≤–æ—â–∏',
        '–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ –≤–∏—Ç–∞–º–∏–Ω–µ D',
        '–ú–∞–≥–Ω–∏–π –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–∏ —Å—Ç—Ä–µ—Å—Å–µ',
        '–ñ–µ–ª–µ–∑–æ –≤–∞–∂–Ω–æ –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏'
      ],
      actionItem: '–î–æ–±–∞–≤—å—Ç–µ –≤ —Ä–∞—Ü–∏–æ–Ω –æ–¥–∏–Ω –Ω–æ–≤—ã–π —Ü–≤–µ—Ç–Ω–æ–π –æ–≤–æ—â'
    },
    progress: 25
  }
];

export function MicroLearningModule() {
  const [selectedLesson, setSelectedLesson] = useState<MicroLesson | null>(null);
  const [isStudying, setIsStudying] = useState(false);

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'sleep': return 'üò¥';
      case 'stress': return 'üßò';
      case 'nutrition': return 'ü•ó';
      case 'exercise': return 'üí™';
      default: return 'üìö';
    }
  };

  const getCategoryColor = (category: string) => {
    switch (category) {
      case 'sleep': return 'bg-blue-500/10 text-blue-600 border-blue-500/20';
      case 'stress': return 'bg-purple-500/10 text-purple-600 border-purple-500/20';
      case 'nutrition': return 'bg-green-500/10 text-green-600 border-green-500/20';
      case 'exercise': return 'bg-orange-500/10 text-orange-600 border-orange-500/20';
      default: return 'bg-gray-500/10 text-gray-600 border-gray-500/20';
    }
  };

  const startLesson = (lesson: MicroLesson) => {
    setSelectedLesson(lesson);
    setIsStudying(true);
  };

  const completeLesson = () => {
    if (selectedLesson) {
      // –ó–¥–µ—Å—å –±—ã –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ store
      setIsStudying(false);
      setSelectedLesson(null);
    }
  };

  const StudyMode = () => {
    if (!selectedLesson) return null;

    return (
      <motion.div
        className="fixed inset-0 bg-background/95 backdrop-blur-xl z-50 flex flex-col"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
      >
        <div className="flex-1 max-w-2xl mx-auto p-6 flex flex-col justify-center">
          <motion.div
            initial={{ y: 20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ delay: 0.1 }}
          >
            <div className="text-center mb-8">
              <div className="text-4xl mb-4">{getCategoryIcon(selectedLesson.category)}</div>
              <h1 className="text-2xl font-bold mb-2">{selectedLesson.title}</h1>
              <div className="flex items-center justify-center gap-4 text-sm text-text-secondary">
                <div className="flex items-center gap-1">
                  <Clock className="w-4 h-4" />
                  {selectedLesson.duration} –º–∏–Ω
                </div>
                <Badge className={getCategoryColor(selectedLesson.category)}>
                  {selectedLesson.category}
                </Badge>
              </div>
            </div>

            <Card className="p-6 mb-6">
              <p className="text-text-primary leading-relaxed mb-6">
                {selectedLesson.content.text}
              </p>

              <div className="mb-6">
                <h3 className="font-semibold mb-3 flex items-center gap-2">
                  <Star className="w-4 h-4 text-health-excellent" />
                  –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
                </h3>
                <ul className="space-y-2">
                  {selectedLesson.content.tips.map((tip, index) => (
                    <motion.li
                      key={index}
                      className="flex items-start gap-2"
                      initial={{ opacity: 0, x: -10 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: 0.2 + index * 0.1 }}
                    >
                      <CheckCircle className="w-4 h-4 text-health-good mt-0.5 flex-shrink-0" />
                      <span className="text-sm">{tip}</span>
                    </motion.li>
                  ))}
                </ul>
              </div>

              <div className="p-4 bg-health-surface/50 rounded-lg">
                <h3 className="font-semibold mb-2 flex items-center gap-2">
                  <Target className="w-4 h-4 text-health-excellent" />
                  –î–µ–π—Å—Ç–≤–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:
                </h3>
                <p className="text-sm text-text-secondary">{selectedLesson.content.actionItem}</p>
              </div>
            </Card>

            <div className="flex gap-3">
              <Button
                variant="outline"
                onClick={() => setIsStudying(false)}
                className="flex-1"
              >
                –ü–æ–∑–∂–µ
              </Button>
              <Button
                onClick={completeLesson}
                className="flex-1 bg-health-excellent hover:bg-health-good"
              >
                –ò–∑—É—á–µ–Ω–æ!
                <CheckCircle className="w-4 h-4 ml-2" />
              </Button>
            </div>
          </motion.div>
        </div>
      </motion.div>
    );
  };

  return (
    <>
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <h2 className="text-lg font-semibold">–ú–∏–∫—Ä–æ–æ–±—É—á–µ–Ω–∏–µ</h2>
          <Badge variant="outline" className="text-xs">
            {mockLessons.filter(l => l.completed).length} / {mockLessons.length}
          </Badge>
        </div>

        <div className="space-y-3">
          {mockLessons.map((lesson, index) => (
            <motion.div
              key={lesson.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.1 }}
            >
              <Card className={`p-4 cursor-pointer transition-all duration-200 hover:shadow-lg ${lesson.completed ? 'bg-health-surface/30' : ''}`}>
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3 flex-1">
                    <div className="text-2xl">{getCategoryIcon(lesson.category)}</div>
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-1">
                        <h3 className="font-medium text-sm">{lesson.title}</h3>
                        {lesson.completed && (
                          <CheckCircle className="w-4 h-4 text-health-excellent" />
                        )}
                      </div>
                      <p className="text-xs text-text-secondary mb-2">{lesson.description}</p>
                      <div className="flex items-center gap-3 text-xs text-text-secondary">
                        <div className="flex items-center gap-1">
                          <Clock className="w-3 h-3" />
                          {lesson.duration} –º–∏–Ω
                        </div>
                        <Badge className={`text-xs ${getCategoryColor(lesson.category)}`}>
                          {lesson.difficulty}
                        </Badge>
                      </div>
                      {lesson.progress > 0 && lesson.progress < 100 && (
                        <div className="mt-2">
                          <Progress value={lesson.progress} className="h-1" />
                        </div>
                      )}
                    </div>
                  </div>
                  <Button
                    size="sm"
                    variant={lesson.completed ? "outline" : "default"}
                    onClick={() => startLesson(lesson)}
                    className="ml-3"
                  >
                    {lesson.completed ? '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å' : lesson.progress > 0 ? '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' : '–ò–∑—É—á–∏—Ç—å'}
                    <ArrowRight className="w-3 h-3 ml-1" />
                  </Button>
                </div>
              </Card>
            </motion.div>
          ))}
        </div>
      </div>

      <AnimatePresence>
        {isStudying && <StudyMode />}
      </AnimatePresence>
    </>
  );
}