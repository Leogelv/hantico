import React, { useState, useEffect } from 'react';
import { BriefingHeader } from './BriefingHeader';
import { MessageList } from './MessageList';
import { MessageInput } from './MessageInput';
import { MobileNavigation } from '@/components/ui/mobile-navigation';
import { useN8N } from '@/hooks/useN8N';
import { Message } from '@/lib/types/briefing.types';

export function BriefingChat() {
  const [messages, setMessages] = useState<Message[]>([]);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [sessionId] = useState(() => `briefing_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
  
  const { sendTextMessage, sendAudioMessage, isLoading } = useN8N(sessionId);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
  useEffect(() => {
    const welcomeMessage: Message = {
      id: 'welcome',
      type: 'ai',
      content: `# –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NeiroSync! ü§ñ

–Ø –≤–∞—à AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã. 

–°–µ–≥–æ–¥–Ω—è –º—ã –ø—Ä–æ–≤–µ–¥–µ–º **–ø–æ–¥—Ä–æ–±–Ω—ã–π –±—Ä–∏—Ñ–∏–Ω–≥** –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ç–æ–≥–æ, –∫–∞–∫ AI –º–æ–∂–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –∑–≤–æ–Ω–∫–æ–≤ –∏ –¥—Ä—É–≥–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞.

## –ß—Ç–æ –º—ã –æ–±—Å—É–¥–∏–º:
- üè¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
- üìû –¢–µ–∫—É—â—É—é —Å–∏—Å—Ç–µ–º—É –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
- ü§ñ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ AI-–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
- üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–∞—à–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏

**–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º!** –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –∑–∞–¥–∞—á–∞—Ö.`,
      timestamp: new Date(),
      isMarkdown: true
    };
    setMessages([welcomeMessage]);
  }, []);

  const handleSendMessage = async (messageText: string) => {
    const userMessage: Message = {
      id: `user_${Date.now()}`,
      type: 'user',
      content: messageText,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ N8N –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
    const aiResponse = await sendTextMessage(messageText);
    
    const aiMessage: Message = {
      id: `ai_${Date.now()}`,
      type: 'ai',
      content: aiResponse,
      timestamp: new Date(),
      isMarkdown: true
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ª—É—á—à–µ–≥–æ UX
    setTimeout(() => {
      setMessages(prev => [...prev, aiMessage]);
    }, 500);
  };

  const handleSendAudio = async (audioBlob: Blob) => {
    const userMessage: Message = {
      id: `user_audio_${Date.now()}`,
      type: 'user',
      content: 'üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      timestamp: new Date(),
      audioFile: URL.createObjectURL(audioBlob)
    };

    setMessages(prev => [...prev, userMessage]);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≤ N8N
    const aiResponse = await sendAudioMessage(audioBlob);
    
    const aiMessage: Message = {
      id: `ai_${Date.now()}`,
      type: 'ai',
      content: aiResponse,
      timestamp: new Date(),
      isMarkdown: true
    };

    setTimeout(() => {
      setMessages(prev => [...prev, aiMessage]);
    }, 500);
  };

  // –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  const calculateProgress = () => {
    const messageCount = messages.filter(m => m.type === 'user').length;
    const progress = Math.min(Math.round((messageCount / 10) * 100), 100);
    return progress;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-red-50 to-gray-50 flex flex-col">
      <BriefingHeader progress={calculateProgress()} />
      
      <MessageList messages={messages} isLoading={isLoading} />
      
      <MessageInput 
        onSendMessage={handleSendMessage}
        onSendAudio={handleSendAudio}
        isLoading={isLoading}
      />

      {/* –ú–æ–±–∏–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
      <MobileNavigation 
        isOpen={isMobileMenuOpen}
        onToggle={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
      />
    </div>
  );
}